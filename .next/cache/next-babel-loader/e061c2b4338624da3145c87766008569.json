{"ast":null,"code":"var _jsxFileName = \"/Users/josephatreyes/Desktop/lernit-prueba/pages/login.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useForm } from 'react-hook-form';\nimport { useState, useRef } from 'react';\nimport app from '../lib/firebase';\nimport { useRouter } from 'next/router';\nimport { Button, Stack, Flex } from \"@chakra-ui/core\";\nimport { Input } from \"@chakra-ui/core\";\n\nconst Login = props => {\n  const {\n    register,\n    handleSubmit,\n    watch,\n    errors\n  } = useForm();\n  const {\n    0: signUpMode,\n    1: setSignUpMode\n  } = useState(false);\n  const formRef = useRef();\n  const router = useRouter();\n\n  const onSubmit = async data => {\n    console.log(data);\n\n    if (signUpMode) {\n      console.log(\"En signUp\");\n      setSignUpMode(false);\n\n      try {\n        await app.auth().createUserWithEmailAndPassword(data.email, data.password);\n        router.push(\"/\");\n      } catch (error) {\n        console.log(error);\n      }\n    } else {\n      try {\n        await app.auth().signInWithEmailAndPassword(data.email, data.password);\n        router.push(\"/\");\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  };\n\n  const SignUp = () => {\n    setSignUpMode(true);\n    handleSubmit(formRef.current.submit);\n  };\n\n  return __jsx(Flex, {\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    h: \"100vh\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, __jsx(\"form\", {\n    ref: formRef,\n    style: {\n      width: \"100%\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      justifyContent: \"center\"\n    },\n    onSubmit: handleSubmit(onSubmit),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }, __jsx(Input, {\n    placeholder: \"correo electr\\xF3nico\",\n    name: \"email\",\n    ref: register({\n      required: true\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 21\n    }\n  }), __jsx(Input, {\n    placeholder: \"contrase\\xF1a\",\n    name: \"password\",\n    ref: register({\n      required: true\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 21\n    }\n  }), errors.exampleRequired && __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 44\n    }\n  }, \"This field is required\"), __jsx(Button, {\n    bg: \"purple.600\",\n    color: \"white\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }\n  }, \"Iniciar Sesi\\xF3n\"), __jsx(Button, {\n    bg: \"purple.600\",\n    color: \"white\",\n    onClick: SignUp,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }\n  }, \"Crear Cuenta\")));\n};\n\nexport default Login;","map":{"version":3,"sources":["/Users/josephatreyes/Desktop/lernit-prueba/pages/login.js"],"names":["useForm","useState","useRef","app","useRouter","Button","Stack","Flex","Input","Login","props","register","handleSubmit","watch","errors","signUpMode","setSignUpMode","formRef","router","onSubmit","data","console","log","auth","createUserWithEmailAndPassword","email","password","push","error","signInWithEmailAndPassword","SignUp","current","submit","width","display","flexDirection","alignItems","justifyContent","required","exampleRequired"],"mappings":"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","sourcesContent":["\n\n\n\nimport { useForm } from 'react-hook-form';\nimport { useState, useRef } from 'react';\nimport app from '../lib/firebase';\nimport { useRouter } from 'next/router'\nimport { Button, Stack, Flex } from \"@chakra-ui/core\";\nimport { Input } from \"@chakra-ui/core\";\nconst Login = props => {\n    const { register, handleSubmit, watch, errors } = useForm();\n    const [signUpMode, setSignUpMode] = useState(false);\n    const formRef = useRef();\n    const router = useRouter()\n    const onSubmit = async data => {\n        console.log(data);\n        if (signUpMode) {\n\n            console.log(\"En signUp\")\n            setSignUpMode(false);\n            try {\n                await app.auth().createUserWithEmailAndPassword(data.email, data.password);\n                router.push(\"/\")\n            } catch (error) {\n                console.log(error)\n            }\n        } else {\n            try {\n                await app.auth().signInWithEmailAndPassword(data.email, data.password);\n                router.push(\"/\")\n            } catch (error) {\n                console.log(error)\n            }\n        }\n    }\n\n    const SignUp = () => {\n        setSignUpMode(true);\n        handleSubmit(formRef.current.submit)\n    }\n    return (\n        <Flex justifyContent=\"center\" alignItems=\"center\" h=\"100vh\" >\n            <form ref={formRef} style={{width:\"100%\", display: \"flex\", flexDirection: \"column\", alignItems: \"center\", justifyContent: \"center\" }} onSubmit={handleSubmit(onSubmit)}>\n                {/* register your input into the hook by invoking the \"register\" function */}\n                \n                    <Input placeholder=\"correo electrónico\" name=\"email\" ref={register({ required: true })} />\n\n                    {/* include validation with required or other standard HTML validation rules */}\n                    <Input placeholder=\"contraseña\" name=\"password\" ref={register({ required: true })} />\n              \n                {/* errors will return when field validation fails  */}\n                {errors.exampleRequired && <span>This field is required</span>}\n                <Button bg=\"purple.600\" color=\"white\" type=\"submit\">Iniciar Sesión</Button>\n\n                <Button bg=\"purple.600\" color=\"white\" onClick={SignUp}>\n                    Crear Cuenta\n              </Button>\n            </form>\n        </Flex>\n    )\n}\n\nexport default Login;"]},"metadata":{},"sourceType":"module"}