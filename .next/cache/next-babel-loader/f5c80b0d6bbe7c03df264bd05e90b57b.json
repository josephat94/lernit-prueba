{"ast":null,"code":"var _jsxFileName = \"/Users/josephatreyes/Desktop/lernit-prueba/pages/_app.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n// import App from 'next/app'\nimport { AuthProvider } from \"../components/auth/auth\";\nimport 'mdbreact/dist/css/mdb.css';\nimport './main.css';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport { ToastContainer } from \"react-toastify\";\n\nfunction MyApp({\n  Component,\n  pageProps\n}) {\n  return __jsx(AuthProvider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 12\n    }\n  }, __jsx(ToastContainer, {\n    position: \"top-center\",\n    autoClose: 5000,\n    hideProgressBar: false,\n    newestOnTop: false,\n    closeOnClick: true,\n    rtl: false,\n    pauseOnFocusLoss: true,\n    draggable: true,\n    pauseOnHover: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 9\n    }\n  }), __jsx(Component, _extends({}, pageProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  })), __jsx(ToastContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }));\n} // Only uncomment this method if you have blocking data requirements for\n// every single page in your application. This disables the ability to\n// perform automatic static optimization, causing every page in your app to\n// be server-side rendered.\n//\n// MyApp.getInitialProps = async (appContext) => {\n//   // calls page's `getInitialProps` and fills `appProps.pageProps`\n//   const appProps = await App.getInitialProps(appContext);\n//\n//   return { ...appProps }\n// }\n\n\nexport default MyApp;","map":{"version":3,"sources":["/Users/josephatreyes/Desktop/lernit-prueba/pages/_app.js"],"names":["AuthProvider","ToastContainer","MyApp","Component","pageProps"],"mappings":";;;;;;AAAA;AAEA,SAASA,YAAT,QAA6B,yBAA7B;AAEA,OAAO,2BAAP;AACA,OAAO,YAAP;AACA,OAAO,2CAAP;AACA,SAASC,cAAT,QAA+B,gBAA/B;;AAEA,SAASC,KAAT,CAAe;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAf,EAAyC;AACrC,SAAO,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACH,MAAC,cAAD;AACI,IAAA,QAAQ,EAAC,YADb;AAEI,IAAA,SAAS,EAAE,IAFf;AAGI,IAAA,eAAe,EAAE,KAHrB;AAII,IAAA,WAAW,EAAE,KAJjB;AAKI,IAAA,YAAY,MALhB;AAMI,IAAA,GAAG,EAAE,KANT;AAOI,IAAA,gBAAgB,MAPpB;AAQI,IAAA,SAAS,MARb;AASI,IAAA,YAAY,MAThB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADG,EAYH,MAAC,SAAD,eAAeA,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAZG,EAcH,MAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdG,CAAP;AAiBH,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAeF,KAAf","sourcesContent":["// import App from 'next/app'\n\nimport { AuthProvider } from \"../components/auth/auth\"\n\nimport 'mdbreact/dist/css/mdb.css'\nimport './main.css'\nimport 'react-toastify/dist/ReactToastify.min.css'\nimport { ToastContainer } from \"react-toastify\"\n\nfunction MyApp({ Component, pageProps }) {\n    return <AuthProvider>\n        <ToastContainer\n            position=\"top-center\"\n            autoClose={5000}\n            hideProgressBar={false}\n            newestOnTop={false}\n            closeOnClick\n            rtl={false}\n            pauseOnFocusLoss\n            draggable\n            pauseOnHover\n        />\n        <Component {...pageProps} />\n\n        <ToastContainer />\n\n    </AuthProvider>\n}\n\n// Only uncomment this method if you have blocking data requirements for\n// every single page in your application. This disables the ability to\n// perform automatic static optimization, causing every page in your app to\n// be server-side rendered.\n//\n// MyApp.getInitialProps = async (appContext) => {\n//   // calls page's `getInitialProps` and fills `appProps.pageProps`\n//   const appProps = await App.getInitialProps(appContext);\n//\n//   return { ...appProps }\n// }\n\nexport default MyApp"]},"metadata":{},"sourceType":"module"}